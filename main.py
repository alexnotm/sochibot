import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_ID = os.getenv("ADMIN_ID", "").strip()

if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ Railway Variables.")
if not ADMIN_ID.isdigit():
    raise RuntimeError("‚ùå ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
ADMIN_ID = int(ADMIN_ID)

# –ü–∞–º—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: { message_id_–∞–¥–º–∏–Ω–∞: user_id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è }
reply_map = {}

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üéü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ *Sochi Tech & Web3 Summit 2025* ‚Äî\n"
        "–≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö, –±–ª–æ–∫—á–µ–π–Ω–µ –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ.\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏, "
        "–∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –∏ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ª–∏—á–Ω–æ üí¨"
    )
    await update.message.reply_text(text, parse_mode="Markdown")


# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
async def handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return

    user = msg.from_user

    # --- 1Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –∞–¥–º–∏–Ω—É
    if user.id != ADMIN_ID:
        who = user.username or user.full_name or f"id:{user.id}"
        text = msg.text or "(–º–µ–¥–∏–∞)"
        print(f"[LOG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{who}: {text}")

        try:
            # –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É –æ—Ä–∏–≥–∏–Ω–∞–ª
            forwarded = await context.bot.forward_message(
                chat_id=ADMIN_ID,
                from_chat_id=msg.chat_id,
                message_id=msg.message_id
            )

            # –ø–æ–¥–ø–∏—Å—å
            caption = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{who} (id: {user.id})"
            note = await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=caption,
                reply_to_message_id=forwarded.message_id
            )

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å (–æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É -> –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            reply_map[note.message_id] = user.id
            reply_map[forwarded.message_id] = user.id

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")

    # --- 2Ô∏è‚É£ –ê–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    elif msg.reply_to_message:
        target_id = None

        # –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É
        if msg.reply_to_message.message_id in reply_map:
            target_id = reply_map[msg.reply_to_message.message_id]

        # –ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é (–µ—Å–ª–∏ forward_origin –µ—Å—Ç—å)
        elif msg.reply_to_message.forward_origin and msg.reply_to_message.forward_origin.sender_user:
            target_id = msg.reply_to_message.forward_origin.sender_user.id

        if target_id:
            try:
                await context.bot.send_message(chat_id=target_id, text=msg.text)
                print(f"[LOG] –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ ‚Üí –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}: {msg.text}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}: {e}")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.")


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.ALL, handler))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    app.run_polling()
